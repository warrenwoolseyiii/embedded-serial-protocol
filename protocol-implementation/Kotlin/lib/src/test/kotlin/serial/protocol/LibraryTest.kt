/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package serial.protocol

import kotlin.test.Test
import kotlin.test.assertTrue

class LibraryTest {
    @Test fun someLibraryMethodReturnsTrue() {
        val classUnderTest = Library()
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'")
    }

    // Test function to set and get myAddr
    @Test fun testMyAddr() {
        val classUnderTest = Library()
        classUnderTest.myAddr = 0x01.toByte()
        assertTrue(classUnderTest.myAddr == 0x01.toByte(), "myAddr should be 0x01")
    }

    // Test function to set and get the broadcast address
    @Test fun testBroadcastAddr() {
        val classUnderTest = Library()
        classUnderTest.broadcastAddr = 0xFF.toByte()
        assertTrue(classUnderTest.broadcastAddr == 0xFF.toByte(), "broadcastAddr should be 0xFF")
    }

    // Test function to generate a basic message
    @Test fun testGenerateMessage() {
        val classUnderTest = Library()
        val msg = classUnderTest.createMessage(tgtAddress = 0x02.toByte(), msgType = 0x01.toByte(), payload = byteArrayOf(0x01.toByte(), 0x02.toByte()), isBroadcast = false)
        assertTrue(msg.srcAddress == classUnderTest.myAddr, "srcAddress should be myAddr")
        assertTrue(msg.tgtAddress == 0x02.toByte(), "tgtAddress should be 0x02")
        assertTrue(msg.msgType == 0x01.toByte(), "msgType should be 0x01")
        assertTrue(msg.payloadLength == 2.toShort(), "payloadLength should be 2")
        assertTrue(msg.payload[0] == 0x01.toByte(), "payload[0] should be 0x01")
        assertTrue(msg.payload[1] == 0x02.toByte(), "payload[1] should be 0x02")
    }

    // Test function to generate a broadcast message
    @Test fun testGenerateBroadcastMessage() {
        val classUnderTest = Library()
        val msg = classUnderTest.createMessage(tgtAddress = 0x02.toByte(), msgType = 0x01.toByte(), payload = byteArrayOf(0x01.toByte(), 0x02.toByte()), isBroadcast = true)
        assertTrue(msg.srcAddress == classUnderTest.broadcastAddr, "srcAddress should be broadcastAddr")
        assertTrue(msg.tgtAddress == 0x02.toByte(), "tgtAddress should be 0x02")
        assertTrue(msg.msgType == 0x01.toByte(), "msgType should be 0x01")
        assertTrue(msg.payloadLength == 2.toShort(), "payloadLength should be 2")
        assertTrue(msg.payload[0] == 0x01.toByte(), "payload[0] should be 0x01")
        assertTrue(msg.payload[1] == 0x02.toByte(), "payload[1] should be 0x02")
    }

    // Test function to generate a message with no payload
    @Test fun testGenerateMessageNoPayload() {
        val classUnderTest = Library()
        val msg = classUnderTest.createMessage(tgtAddress = 0x02.toByte(), msgType = 0x01.toByte(), payload = byteArrayOf(), isBroadcast = false)
        assertTrue(msg.srcAddress == classUnderTest.myAddr, "srcAddress should be myAddr")
        assertTrue(msg.tgtAddress == 0x02.toByte(), "tgtAddress should be 0x02")
        assertTrue(msg.msgType == 0x01.toByte(), "msgType should be 0x01")
        assertTrue(msg.payloadLength == 0.toShort(), "payloadLength should be 0")
    }

    // Test function to generate a message with the largest possible payload
    @Test fun testGenerateMessageMaxPayload() {
        val classUnderTest = Library()
        val msg = classUnderTest.createMessage(tgtAddress = 0x02.toByte(), msgType = 0x01.toByte(), payload = ByteArray(65535), isBroadcast = false)
        assertTrue(msg.srcAddress == classUnderTest.myAddr, "srcAddress should be myAddr")
        assertTrue(msg.tgtAddress == 0x02.toByte(), "tgtAddress should be 0x02")
        assertTrue(msg.msgType == 0x01.toByte(), "msgType should be 0x01")
        assertTrue(msg.payloadLength == 65535.toShort(), "payloadLength should be 65535")
    }

    // Test function to generate a message with a payload that is too large
    @Test fun testGenerateMessageTooLargePayload() {
        val classUnderTest = Library()
        // This should throw an exception
        try {
            val msg = classUnderTest.createMessage(tgtAddress = 0x02.toByte(), msgType = 0x01.toByte(), payload = ByteArray(65536), isBroadcast = false)
            // If we get here then the test failed
            assertTrue(false, "Payload too large should throw an exception")
        } catch (e: Exception) {
            // Print the exception message
            println(e.message)
            // Return true if the exception was thrown
            assertTrue(true, "Exception should be thrown")
        }
    }
}
